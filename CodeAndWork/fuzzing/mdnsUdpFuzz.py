#!/bin/python

import socket
import subprocess
import os
import random


UDP_IP = "127.0.0.1"
UDP_PORT = 5353
PROCESS_NAME = "mDNSResponder"
OUTPUT_FILE = "mdnsUdpFuzz.txt"
PATH_TO_APP = "/usr/sbin/mDNSResponderHelper"
NUM_RUNS = 1000000

# need to build the packet together because some parts don't change
# only the RANDOM pieces do, rest don't get sent to radamsa
# this packet is the data of real communication on this port
P1 = "\x00\x00\x00\x00\x00\x11\x00\x01\x00\x00\x00\x00\x08\x5f\x61\x69\x72\x70\x6f\x72\x74\x04\x5f\x74\x63\x70\x05\x6c\x6f\x63\x61\x6c\x00\x00\x0c\x00\x01\x08\x5f\x61\x69\x72\x70\x6c\x61\x79\xc0\x15\x00\x0c\x00\x01\x05\x5f\x72\x61\x6f\x70\xc0\x15\x00\x0c\x00\x01\x07\x5f\x69\x70\x70\x75\x73\x62\xc0\x15\x00\x0c\x00\x01\x06\x5f\x75\x73\x63\x61\x6e\xc0\x15\x00\x0c\x00\x01\x08\x5f\x70\x72\x69\x6e\x74\x65\x72\xc0\x15\x00\x0c\x00\x01\x04\x5f\x69\x70\x70\xc0\x15\x00\x0c\x00\x01\x07\x5f\x75\x73\x63\x61\x6e\x73\xc0\x15\x00\x0c\x00\x01\x04\x5f\x70\x74\x70\xc0\x15\x00\x0c\x00\x01\x0f\x5f\x70\x64\x6c\x2d\x64\x61\x74\x61\x73\x74\x72\x65\x61\x6d\xc0\x15\x00\x0c\x00\x01\x08\x5f\x73\x63\x61\x6e\x6e\x65\x72\xc0\x15\x00\x0c\x00\x01\x05\x5f\x69\x70\x70\x73\xc0\x15\x00\x0c\x00\x01\x07\x5f\x72\x64\x6c\x69\x6e\x6b\xc0\x15\x00\x0c\x00\x01\x0f\x5f\x63\x6f\x6d\x70\x61\x6e\x69\x6f\x6e\x2d\x6c\x69\x6e\x6b\xc0\x15\x00\x0c\x00\x01\x0d\x5f\x61\x70\x70\x6c\x65\x2d\x6d\x6f\x62\x64\x65\x76\xc0\x15\x00\x0c\x00\x01\x08\x38\x62\x61\x65\x30\x37\x63\x30\x04\x5f\x73\x75\x62\x0e\x5f\x61\x70\x70\x6c\x65\x2d\x6d\x6f\x62\x64\x65\x76\x32\xc0\x15\x00\x0c\x00\x01\x0f\x5f\x61\x70\x70\x6c\x65\x2d\x70\x61\x69\x72\x61\x62\x6c\x65\xc0\x15\x00\x0c\x00\x01\xc0\xcd\x00\x0c\x00\x01\x00\x00\x0d\x9e\x00"
R1 = "\x1a\x17\x42\x72\x65\x6e\x64\x61\x6e\xe2\x80\x99\x73\x20\x4d\x61\x63\x42\x6f\x6f\x6b\x20\x50\x72\x6f\xc0\xcd"
P2_1 = bytes("\x00\x00\x00\x00\x00\x12\x00\x0b\x00\x00\x00\x01\x08\x5f\x61\x69\x72\x70\x6f\x72\x74\x04\x5f\x74\x63\x70\x05\x6c\x6f\x63\x61\x6c\x00\x00\x0c\x00\x01\x08\x5f\x61\x69\x72\x70\x6c\x61\x79\xc0\x15\x00\x0c\x00\x01\x05\x5f\x72\x61\x6f\x70\xc0\x15\x00\x0c\x00\x01\x07\x5f\x69\x70\x70\x75\x73\x62\xc0\x15\x00\x0c\x00\x01\x06\x5f\x75\x73\x63\x61\x6e\xc0\x15\x00\x0c\x00\x01\x08\x5f\x70\x72\x69\x6e\x74\x65\x72\xc0\x15\x00\x0c\x00\x01\x04\x5f\x69\x70\x70\xc0\x15\x00\x0c\x00\x01\x07\x5f\x75\x73\x63\x61\x6e\x73\xc0\x15\x00\x0c\x00\x01\x04\x5f\x70\x74\x70\xc0\x15\x00\x0c\x00\x01\x0f\x5f\x70\x64\x6c\x2d\x64\x61\x74\x61\x73\x74\x72\x65\x61\x6d\xc0\x15\x00\x0c\x00\x01\x08\x5f\x73\x63\x61\x6e\x6e\x65\x72\xc0\x15\x00\x0c\x00\x01\x05\x5f\x69\x70\x70\x73\xc0\x15\x00\x0c\x00\x01\x07\x5f\x72\x64\x6c\x69\x6e\x6b\xc0\x15\x00\x0c\x00\x01\x0f\x5f\x63\x6f\x6d\x70\x61\x6e\x69\x6f\x6e\x2d\x6c\x69\x6e\x6b\xc0\x15\x00\x0c\x00\x01\x0d\x5f\x61\x70\x70\x6c\x65\x2d\x6d\x6f\x62\x64\x65\x76\xc0\x15\x00\x0c\x00\x01\x08\x38\x62\x61\x65\x30\x37\x63\x30\x04\x5f\x73\x75\x62\x0e\x5f\x61\x70\x70\x6c\x65\x2d\x6d\x6f\x62\x64\x65\x76\x32\xc0\x15\x00\x0c\x00\x01\x0f\x5f\x61\x70\x70\x6c\x65\x2d\x70\x61\x69\x72\x61\x62\x6c\x65\xc0\x15\x00\x0c\x00\x01", "utf-8")
R2_1 = "\x0c\x5f\x73\x6c\x65\x65\x70\x2d\x70\x72\x6f\x78\x79\x04\x5f\x75\x64\x70\xc0\x1a"
P2_2 = bytes("\x00\x0c\x00\x01\xc0\x6a\x00\x0c\x00\x01\x00\x00\x0e\x0d\x00", "utf-8")
R2_2 = "\x2c\x29\x42\x72\x6f\x74\x68\x65\x72\x20\x4d\x46\x43\x2d\x38\x34\x38\x30\x44\x4e\x20\x40\x20\x46\x6f\x72\x65\x73\x74\x27\x73\x20\x4d\x61\x63\x42\x6f\x6f\x6b\x20\x50\x72\x6f\xc0\x6a\xc0\x6a"
P2_3 = bytes("\x00\x0c\x00\x01\x00\x00\x0e\x0d\x00", "utf-8")
R2_3 = "\x35\x32\x45\x50\x53\x4f\x4e\x20\x57\x50\x2d\x34\x35\x33\x30\x20\x53\x65\x72\x69\x65\x73\x20\x40\x20\x4d\x69\x63\x68\x61\x65\x6c\xe2\x80\x99\x73\x20\x4d\x61\x63\x42\x6f\x6f\x6b\x20\x41\x69\x72\x20\x28\x32\x29\xc0\x6a\xc0\x6a"
P2_4 = bytes("\x00\x0c\x00\x01\x00\x00\x0e\x0d\x00", "utf-8")
R2_4 = "\x30\x2d\x43\x61\x6e\x6f\x6e\x20\x4d\x47\x33\x32\x30\x30\x20\x73\x65\x72\x69\x65\x73\x20\x40\x20\x53\x74\x65\x70\x68\x65\x6e\xe2\x80\x99\x73\x20\x4d\x61\x63\x42\x6f\x6f\x6b\x20\x41\x69\x72\xc0\x6a\xc0\x6a"
P2_5 = bytes("\x00\x0c\x00\x01\x00\x00\x0e\x0d\x00", "utf-8")
R2_5 = "\x30\x2d\x45\x50\x53\x4f\x4e\x20\x58\x50\x2d\x34\x30\x30\x20\x53\x65\x72\x69\x65\x73\x20\x40\x20\x53\x74\x65\x70\x68\x65\x6e\xe2\x80\x99\x73\x20\x4d\x61\x63\x42\x6f\x6f\x6b\x20\x41\x69\x72\xc0\x6a\xc0\x6a"
P2_6 = bytes("\x00\x0c\x00\x01\x00\x00\x0e\x0d\x00", "utf-8")
R2_6 = "\x1e\x1b\x48\x6f\x6d\x65\x20\x40\x20\x56\x69\x63\x6b\xe2\x80\x99\x73\x20\x4d\x61\x63\x42\x6f\x6f\x6b\x20\x50\x72\x6f\xc0\x6a\xc0\xb3"
P2_7 = bytes("\x00\x0c\x00\x01\x00\x00\x0e\x0d\x00\x2c\x29\x42\x72\x6f\x74\x68\x65\x72\x20\x4d\x46\x43\x2d\x38\x34\x38\x30\x44\x4e\x20\x40\x20\x46\x6f\x72\x65\x73\x74\x27\x73\x20\x4d\x61\x63\x42\x6f\x6f\x6b\x20\x50\x72\x6f\xc0\xb3\xc0\xb3\x00\x0c\x00\x01\x00\x00\x0e\x0d\x00\x35\x32\x45\x50\x53\x4f\x4e\x20\x57\x50\x2d\x34\x35\x33\x30\x20\x53\x65\x72\x69\x65\x73\x20\x40\x20\x4d\x69\x63\x68\x61\x65\x6c\xe2\x80\x99\x73\x20\x4d\x61\x63\x42\x6f\x6f\x6b\x20\x41\x69\x72\x20\x28\x32\x29\xc0\xb3\xc0\xb3\x00\x0c\x00\x01\x00\x00\x0e\x0d\x00\x30\x2d\x43\x61\x6e\x6f\x6e\x20\x4d\x47\x33\x32\x30\x30\x20\x73\x65\x72\x69\x65\x73\x20\x40\x20\x53\x74\x65\x70\x68\x65\x6e\xe2\x80\x99\x73\x20\x4d\x61\x63\x42\x6f\x6f\x6b\x20\x41\x69\x72\xc0\xb3\xc0\xb3\x00\x0c\x00\x01\x00\x00\x0e\x0d\x00\x30\x2d\x45\x50\x53\x4f\x4e\x20\x58\x50\x2d\x34\x30\x30\x20\x53\x65\x72\x69\x65\x73\x20\x40\x20\x53\x74\x65\x70\x68\x65\x6e\xe2\x80\x99\x73\x20\x4d\x61\x63\x42\x6f\x6f\x6b\x20\x41\x69\x72\xc0\xb3\xc0\xb3\x00\x0c\x00\x01\x00\x00\x0e\x0d\x00", "utf-8")
R2_7 = "\x1e\x1b\x48\x6f\x6d\x65\x20\x40\x20\x56\x69\x63\x6b\xe2\x80\x99\x73\x20\x4d\x61\x63\x42\x6f\x6f\x6b\x20\x50\x72\x6f\xc0\xb3\xc0\xcd"
P2_8 = bytes("\x00\x0c\x00\x01\x00\x00\x0e\x0f\x00\x1a\x17\x42\x72\x65\x6e\x64\x61\x6e\xe2\x80\x99\x73\x20\x4d\x61\x63\x42\x6f\x6f\x6b\x20\x50\x72\x6f\xc0\xcd\x00\x00\x29\x05\xa0\x00\x00\x11\x94\x00\x0c\x00\x04\x00\x08\x00", "utf-8")
R2_8 = "\xeb\xa4\x5e\x60\xdd\x8d\xf7"

numTests = 0
numCrashes = 0
crashingInput = []

def Main():
    global numCrashes
    global numTests

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

    for i in range(NUM_RUNS):
        try:
            if random.random() < 0.5:
                # get the random pieces using radamsa
                proc1 = subprocess.Popen(["echo", R1], stdout = subprocess.PIPE)
                proc2 = subprocess.Popen(["../../radamsa/bin/radamsa"], stdin = proc1.stdout, stdout = subprocess.PIPE)
                random1, error = proc2.communicate()
                # put together the data
                randomPacket = bytes(P1, "utf-8") + random1
            else:
                # get the random pieces using radamsa
                proc1 = subprocess.Popen(["echo", R2_1], stdout = subprocess.PIPE)
                proc2 = subprocess.Popen(["../../radamsa/bin/radamsa"], stdin = proc1.stdout, stdout = subprocess.PIPE)
                rand1, error = proc2.communicate()
                proc3 = subprocess.Popen(["echo", R2_2], stdout = subprocess.PIPE)
                proc4 = subprocess.Popen(["../../radamsa/bin/radamsa"], stdin = proc3.stdout, stdout = subprocess.PIPE)
                rand2, error = proc4.communicate()
                proc5 = subprocess.Popen(["echo", R2_3], stdout = subprocess.PIPE)
                proc6 = subprocess.Popen(["../../radamsa/bin/radamsa"], stdin = proc5.stdout, stdout = subprocess.PIPE)
                rand3, error = proc6.communicate()
                proc7 = subprocess.Popen(["echo", R2_4], stdout = subprocess.PIPE)
                proc8 = subprocess.Popen(["../../radamsa/bin/radamsa"], stdin = proc7.stdout, stdout = subprocess.PIPE)
                rand4, error = proc8.communicate()
                proc9 = subprocess.Popen(["echo", R2_5], stdout = subprocess.PIPE)
                proc10 = subprocess.Popen(["../../radamsa/bin/radamsa"], stdin = proc9.stdout, stdout = subprocess.PIPE)
                rand5, error = proc10.communicate()
                proc11 = subprocess.Popen(["echo", R2_6], stdout = subprocess.PIPE)
                proc12 = subprocess.Popen(["../../radamsa/bin/radamsa"], stdin = proc11.stdout, stdout = subprocess.PIPE)
                rand6, error = proc12.communicate()
                proc13 = subprocess.Popen(["echo", R2_7], stdout = subprocess.PIPE)
                proc14 = subprocess.Popen(["../../radamsa/bin/radamsa"], stdin = proc13.stdout, stdout = subprocess.PIPE)
                rand7, error = proc14.communicate()
                proc15 = subprocess.Popen(["echo", R2_8], stdout = subprocess.PIPE)
                proc16 = subprocess.Popen(["../../radamsa/bin/radamsa"], stdin = proc15.stdout, stdout = subprocess.PIPE)
                rand8, error = proc16.communicate()

                # put together the data
                randomPacket = P2_1 + rand1 + P2_2 + rand2 + P2_3 + rand3 + P2_4 + rand4 + P2_5 + rand5 + P2_6 + rand6 + P2_7 + rand7 + P2_8 + rand8
            
            if len(randomPacket) > 1500:
                randomPacket = randomPacket[ : 1500]

            # send the packet
            sock.sendto(randomPacket, (UDP_IP, UDP_PORT))
            # check if process crashed
            if not CheckIfAlive(PROCESS_NAME):
                crashingInput.append(" ".join(x.encode("hex") for x in randomPacket))
                numCrashes += 1
                StartApp()
            numTests += 1
            print(i)
        except KeyboardInterrupt:
            Clean(sock)
    Clean(sock)

def StartApp():
    subprocess.Popen([PATH_TO_APP, "&"])

def CheckIfAlive(procName):
    proc1 = subprocess.Popen(["lsof", "-i", "udp", "+c", "0"], stdout = subprocess.PIPE)
    proc2 = subprocess.Popen(["grep", procName], stdin = proc1.stdout, stdout = subprocess.PIPE)
    processes, error = proc2.communicate()
    if processes == "":
        return False
    return True

def Clean(sock):
    print("\nCrashed on " + str(numCrashes) + " inputs out of " + str(numTests))
    with open(OUTPUT_FILE, "w") as out:
        for i in range(len(crashingInput)):
            out.write("Crashed on:" + crashingInput[i] + "\n\n")
    sock.close()
    exit(1)

if __name__ == "__main__":
    Main()
